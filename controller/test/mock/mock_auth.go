// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/task/auth.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockauthTools is a mock of authTools interface
type MockauthTools struct {
	ctrl     *gomock.Controller
	recorder *MockauthToolsMockRecorder
}

// MockauthToolsMockRecorder is the mock recorder for MockauthTools
type MockauthToolsMockRecorder struct {
	mock *MockauthTools
}

// NewMockauthTools creates a new mock instance
func NewMockauthTools(ctrl *gomock.Controller) *MockauthTools {
	mock := &MockauthTools{ctrl: ctrl}
	mock.recorder = &MockauthToolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockauthTools) EXPECT() *MockauthToolsMockRecorder {
	return m.recorder
}

// GetReviewer mocks base method
func (m *MockauthTools) GetReviewer(userName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewer", userName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewer indicates an expected call of GetReviewer
func (mr *MockauthToolsMockRecorder) GetReviewer(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewer", reflect.TypeOf((*MockauthTools)(nil).GetReviewer), userName)
}

// IsDba mocks base method
func (m *MockauthTools) IsDba(userName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDba", userName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDba indicates an expected call of IsDba
func (mr *MockauthToolsMockRecorder) IsDba(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDba", reflect.TypeOf((*MockauthTools)(nil).IsDba), userName)
}
