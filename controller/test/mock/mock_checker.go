// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/task/checker.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	task "github.com/ibanyu/owl/service/task"
	reflect "reflect"
)

// MocksqlChecker is a mock of sqlChecker interface
type MocksqlChecker struct {
	ctrl     *gomock.Controller
	recorder *MocksqlCheckerMockRecorder
}

// MocksqlCheckerMockRecorder is the mock recorder for MocksqlChecker
type MocksqlCheckerMockRecorder struct {
	mock *MocksqlChecker
}

// NewMocksqlChecker creates a new mock instance
func NewMocksqlChecker(ctrl *gomock.Controller) *MocksqlChecker {
	mock := &MocksqlChecker{ctrl: ctrl}
	mock.recorder = &MocksqlCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksqlChecker) EXPECT() *MocksqlCheckerMockRecorder {
	return m.recorder
}

// SqlCheck mocks base method
func (m *MocksqlChecker) SqlCheck(sql, charset, collation string, info *task.DBInfo) (bool, string, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SqlCheck", sql, charset, collation, info)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// SqlCheck indicates an expected call of SqlCheck
func (mr *MocksqlCheckerMockRecorder) SqlCheck(sql, charset, collation, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SqlCheck", reflect.TypeOf((*MocksqlChecker)(nil).SqlCheck), sql, charset, collation, info)
}

// ListRules mocks base method
func (m *MocksqlChecker) ListRules() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// ListRules indicates an expected call of ListRules
func (mr *MocksqlCheckerMockRecorder) ListRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MocksqlChecker)(nil).ListRules))
}
